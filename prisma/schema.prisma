// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String?   @unique
  password String
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Brand {
  mongo_id    String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  slug        String    @unique
  mapped_ids  Int[]
  available   Boolean
  products    Product[]
}

model Product {
  mongo_id        String       @id @default(auto()) @map("_id") @db.ObjectId
  id              Int          @unique
  sku             String       @unique
  price           Float
  wholesale_price Float
  available       Boolean
  brand           Brand        @relation(fields: [brandId], references: [mongo_id])
  brandId         String       @db.ObjectId
  name            String
  description     String?
  features        Json
  department      Department?  @relation(fields: [departmentId], references: [mongo_id])
  departmentId    String?      @db.ObjectId
  category        Category?    @relation(fields: [categoryId], references: [mongo_id])
  categoryId      String?      @db.ObjectId
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [mongo_id])
  subcategoryId   String?      @db.ObjectId
  images          Json
  sizes           Json
  status          Int
  updated_at      Float?
  created_at      Float?
}

model Department {
  mongo_id    String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String
  mapped_ids  Int[]
  order       Int
  available   Boolean
  categories  Category[]
  Product     Product[]
}

model Category {
  mongo_id      String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String
  mapped_ids    Int[]
  order         Int
  available     Boolean
  department    Department    @relation(fields: [departmentId], references: [mongo_id])
  departmentId  String        @db.ObjectId
  subcategories Subcategory[]
  Product       Product[]
}

model Subcategory {
  mongo_id   String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  order      Int
  available  Boolean
  mapped_ids Int[]
  category   Category  @relation(fields: [categoryId], references: [mongo_id])
  categoryId String    @db.ObjectId
  Product    Product[]
}

model Order {
  mongo_id   String  @id @default(auto()) @map("_id") @db.ObjectId
  line_items Json
  email      String
  city       String?
  postalCode String?
  country    String?
  paid       Boolean
  updated_at Float?
  created_at Float?
}
